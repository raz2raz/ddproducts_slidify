x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="./data/ss06hid.csv",method="curl")
ACSData <- read.csv("./data/ss06hid.csv")
names(ACSData)
getdata_data_ss06hid <- read.csv("X:/scratch/rclass/quiz4/getdata_data_ss06hid.csv")
View(getdata_data_ss06hid)
splitnames = strsplit(names(getdata_data_ss06hid),"wgtp")
splitnames
splitnames[123]
getdata_data_GDP <- read.csv("X:/scratch/rclass/quiz4/getdata_data_GDP.csv", header=FALSE)
View(getdata_data_GDP)
getdata_data_GDP[-grep(' ', d[,2]),]
getdata_data_GDP[-grep(' ', getdata_data_GDP[,2]),]
GDP_edit <- read.csv("X:/scratch/rclass/quiz4/GDP_edit.csv")
View(GDP_edit)
names(GDP_edit)
?gsub
gsub(",","",GDP_edit$x.millions.of.dollars)
gsub("\\,","",GDP_edit$x.millions.of.dollars)
gsub("\,","",GDP_edit$x.millions.of.dollars)
gsub(",","",GDP_edit$x\\.millions\\.of\\.dollars)
gsub(",","",GDP_edit$x.millions.of.dollars)
gsub(",","",GDP_edit$x.millions.of.dollars)
gsub(",","",GDP_edit$x.millions.of.US.dollars)
X.millions.of.US.dollars.
GDP_edit$X.millions.of.US.dollars.
gsub(",","",GDP_edit$X.millions.of.US.dollars.)
GDP_edit$X.millions.of.US.dollars. <- gsub(",","",GDP_edit$X.millions.of.US.dollars.)
GDP_edit$X.millions.of.US.dollars.
GDP_edit$X.millions.of.US.dollars.
View(GDP_edit)
mean(GDP_edit$X.millions.of.US.dollars.,GDP_edit$Ranking>0)
GDP_filtered <- GDP_edit[,GDP_edit$RANKING>0]
GDP_filtered <- GDP_edit[,GDP_edit$Ranking>0]
GDP_filtered <- GDP_edit[GDP_edit$Ranking>0,]
GDP_fltered
GDP_filtered
GDP_filtered <- GDP_edit[!is.na(GDP_edit$Ranking),]
GDP_filtered
summary(GDP_filtered)
as.numeric(GDP_filtered$X.millions.of.US.dollars.)
mean(as.numeric(GDP_filtered$X.millions.of.US.dollars.))
View(GDP_filtered)
grep("^United",GDP_filtered$Country)
grep("^United",GDP_filtered$Economy)
getdata_data_EDSTATS_Country <- read.csv("X:/scratch/rclass/quiz4/getdata_data_EDSTATS_Country.csv")
View(getdata_data_EDSTATS_Country)
merged_GDP_STATS <- merge(GDP_Filtered,getdata_data_EDSTATS_Country,by.x="Country",by.y="CountryCode",all=true)
merged_GDP_STATS <- merge(GDP_filtered,getdata_data_EDSTATS_Country,by.x="Country",by.y="CountryCode",all=true)
merged_GDP_STATS <- merge(GDP_filtered,getdata_data_EDSTATS_Country,by.x="Country",by.y="CountryCode",all=TRUE)
head(merged_GDP_STATS)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
install.packages("lubridate")
amzn(,wday(x[amzn.names],label=TRUE)
)
amzn[,wday(x[amzn.names],label=TRUE]
amzn[,wday(x(amzn.names),label=TRUE]
names(amzn)
rownames(amzn)
row.names(amzn)
amzn
amzn$row.names
amzn$rownames
amzn$names
row.name(amzn)
row.names(amzn)
names(amzn)
rownames(amzn)
colames(amzn)
colnames(amzn)
dimnames(amzn)
amzn
hea(amzn)
head(amzn)
dimnames(amzn)
rownames(amzn[1,1])
rownames(amzn[2,2])
rownames(amzn[2,0])
rownames(amzn[,2])
View(GDP_filtered)
View(merged_GDP_STATS)
merged_GDP_STATS[grepl("June",merged_GDP_STATS$SpecialNotes),]
merged_GDP_STATS[grepl("June",merged_GDP_STATS$Special.Notes),]
june_merged_GDP_STATS<-merged_GDP_STATS[grepl("June",merged_GDP_STATS$Special.Notes),]
View(june_merged_GDP_STATS)
june_merged_GDP_STATS<-merged_GDP_STATS[grepl(("Fiscal"|June"),merged_GDP_STATS$Special.Notes),]
)
()
(
(
)
exit
)()()()
()
(
+
;
!
$
save.image("~/gg.RData")
june_merged_GDP_STATS<-merged_GDP_STATS[grepl("June",merged_GDP_STATS$Special.Notes),]
june_merged_GDP_STATS<-june_merged_GDP_STATS[!grepl("Fiscal",june_merged_GDP_STATS$Special.Notes),]
june_merged_GDP_STATS<-merged_GDP_STATS[grepl("June",merged_GDP_STATS$Special.Notes),]
june_merged_GDP_STATS<-june_merged_GDP_STATS[grepl("Fiscal",june_merged_GDP_STATS$Special.Notes),]
View(june_merged_GDP_STATS)
write.table(amzn,"amzn.txt", sep=',', row.names=TRUE, ,na="")
amzn[2,3]
row.names(amzn[2,3])
as.date(row.names(amzn[2,3]))
date(row.names(amzn[2,3]))
row.names(amzn[2,3])
format(row.names(amzn[2,3]),"%a")
format(rownames(amzn[2,3]),"%a")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
View(GDP_filtered)
row.names(amzn)
index(amzn)
amzn["2015-01-20"]
amzn["2015"]
amzn["2012"]
nrow(amzn["2012"])
nrow(amzn["2012"|"2015"])
nrow(amzn["2012"])
nrow(amzn["2012"& "2015"])
nrow(amzn[("2012"&"2015")])
nrow(amzn[(grep("2012")])
nrow(amzn[(grep("2012")])
nrow(amzn[(grep("2012"))])
?index
amzn["2012"]
amzn$thedate<- index(amzn)
amzn
head(amzn)
amzn$thedate<- as.date(index(amzn),%a%d%b%Y)
amzn$thedate<- as.date(index(amzn),%d%b%Y)
as.date(index(amzn),%a%d%b%Y)
amzn$thedate<- as.char(index(amzn))
amzn$thedate<- as.character(index(amzn))
head(amzn)
grep("2012")
grep("2012",amzn$thedate)
nrow(grep("2012",amzn$thedate))
length(grep("2012",amzn$thedate))
?qunif
qunit(.75,min=0,max=1)
qunif(.75,min=0,max=1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
mean(temp[1,])
mean(temp[2,])
mean(temp)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x ^ 2 * p) - sum(x * p) ^ 2
sum(temp$X ^ 2 * temp$Prob) - sum(temp$X * temp$Prob) ^ 2
sum(temp[1,] ^ 2 * temp[2,]) - sum(temp[1,] * temp[$Prob]2,) ^ 2
sum(temp[1,] ^ 2 * temp[2,]) - sum(temp[1,] * temp[2,]) ^ 2
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?print.trellis
?splom
?par
?trellis.par.set
?panel.points
?panel.axis
?panel.lines
library(datasets)
data(airquality)
install.packages("ggplot2")
airquality
head(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(votes, rating), geom=c("point"))
movies
aes
head movies
head(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
apropos("^panel")
?panel.points
#1000 SAMPLES OF RXP OF HISTOGRAM
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
#THEORETICAL MEAN 1/lambda, = 1/0.2 , =5 .
tmn = 1/.2
abline(v=5,col="black",lwd=5, label="what")
mean(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
#THEORETICAL MEAN 1/lambda, = 1/0.2 , =5 .
tmn = 1/.2
abline(v=5,col="black",lwd=5, label="what")
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
samplemean = mean(mns)
abline(v=samplemean,col="black",lwd=5)
#THEORETICAL MEAN of EXPONENTIAL DISTRIBUTION 1/lambda, = 1/0.2 , =5 .
tmn = 1/.2
abline(v=tmn,col="blue",lwd=5)
#1000 SAMPLES OF RXP OF HISTOGRAM
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
samplemean = mean(mns)
abline(v=samplemean,col="black",lwd=4)
#THEORETICAL MEAN of EXPONENTIAL DISTRIBUTION 1/lambda, = 1/0.2 , =5 .
tmn = 1/.2
abline(v=tmn,col="blue",lwd=4)
#1000 SAMPLES OF RXP OF HISTOGRAM
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
samplemean = mean(mns)
abline(v=samplemean,col="black",lwd=4)
samplemean
#THEORETICAL MEAN of EXPONENTIAL DISTRIBUTION 1/lambda, = 1/0.2 , =5 .
tmean = 1/.2
abline(v=tmean,col="blue",lwd=4)
tmean
#1000 SAMPLES OF RXP OF HISTOGRAM
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
samplemean = mean(mns)
abline(v=samplemean,col="black",lwd=4)
samplemean
#THEORETICAL MEAN of EXPONENTIAL DISTRIBUTION 1/lambda, = 1/0.2 , =5 .
tmean = 1/.2
abline(v=tmean,col="blue",lwd=4)
tmean
#1000 SAMPLES OF RXP OF HISTOGRAM
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
samplemean = mean(mns)
abline(v=samplemean,col="black",lwd=4)
samplemean
#THEORETICAL MEAN of EXPONENTIAL DISTRIBUTION 1/lambda, = 1/0.2 , =5 .
tmean = 1/.2
abline(v=tmean,col="blue",lwd=4)
tmean
#1000 SAMPLES OF RXP OF HISTOGRAM
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns, col="red", xlab="Sample Means", main="Sample Means of Exponential Distribution")
samplemean = mean(mns)
abline(v=samplemean,col="black",lwd=4)
samplemean
#THEORETICAL MEAN of EXPONENTIAL DISTRIBUTION 1/lambda, = 1/0.2 , =5 .
tmean = 1/.2
abline(v=tmean,col="blue",lwd=4)
tmean
?KNITR
?knitr
?knit2html
runif(1000)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
nmns = NULL
nmns = runif(1000)
nmns = NULL
nmns = rexp(1000,0.2)
hist(nmns)
hist(nmns)
hist(nmns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
3-2
q2d(samplemean)
install.package('rcdd')
install.packages('rcdd')
library(rcdd)
q2d(samplemean)
d2q(samplemean)
?random.seed
?Random.seed
var(mns)
var(nmns)
sqrt(5)
?var
?std
?stdev
sd(mns)
sd(nmns)
install.packages("MiKTex")
install.packages("MiKTeX")
library("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, ylab="Tooth Length", panel=panel.smooth,xlab="Dose in Milligrams",layout = c(1,2))
suppressMessages(library(datasets))
suppressMessages(library(dplyr))
tgdata<-tbl_df(ToothGrowth)
library("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, ylab="Tooth Length", panel=panel.smooth,xlab="Dose in Milligrams",layout = c(1,2))
library("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
?xyplot
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type="l", ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
dotplot (tgdata$len ~ tgdata$dose|tgdata$supp, type="l", ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
barchart (tgdata$len ~ tgdata$dose|tgdata$supp, type="l", ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
stripplot (tgdata$len ~ tgdata$dose|tgdata$supp, type="l", ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
bwplot (tgdata$len ~ tgdata$dose|tgdata$supp, type="l", ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type="l", ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","r"), ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
?panel.type
?panel.options
?panel.xyplot
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","r"), ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
library("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","l"), ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
library("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","r"), ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","l"), ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
ibrary("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","r"), ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
library("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","r"), grid=TRUE, ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
?hist
library("lattice")
xyplot (tgdata$len ~ tgdata$dose|tgdata$supp, type=c("p","r"), grid=TRUE, ylab="Tooth Length", xlab="Dose in Milligrams",layout = c(1,2))
hist(tgdata$dose,FREQ=TRUE, col="blue", xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len,FREQ=TRUE, col="blue", xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len, col="blue", xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len,FREQ=TRUE, col="blue", xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len,Freq=TRUE, col="blue", xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len,freq=TRUE, col="blue", xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len, col="blue", xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len, col="blue" ,freq=TRUE , xlab="Random Exponentials", main="Referential Exponential Distribution")
hist(tgdata$len~tgdata$dose, col="blue" ,freq=TRUE , xlab="Tooth Length", main="Referential Exponential Distribution")
pairs(~ len + dose + supp, data = tgdata,
, main = "Swiss data, Education < 20")
hist(tgdata$len~tgdata$dose, col="blue" ,freq=TRUE , xlab="Tooth Length", main="Referential Exponential Distribution")
hist(tgdata$len, col="blue" ,freq=TRUE , xlab="Random Exponentials", main="Referential Exponential Distribution")
hist((subset(tgdata, supp == "OJ", select = len)), col="blue" ,freq=TRUE , xlab="Tooth Length", main="Tooth Length for Orange Juice")
x<-(subset(tgdata, supp == "OJ", select = len))
hist(x, col="blue" ,freq=TRUE , xlab="Tooth Length", main="Tooth Length for Orange Juice")
View(x)
hist(x$len, col="blue" ,freq=TRUE , xlab="Tooth Length", main="Tooth Length for Orange Juice")
st<-(subset(tgdata, supp == "OJ", select = len))
hist(st$len, col="blue" ,freq=TRUE , xlab="Tooth Length", main="Tooth Length for Orange Juice")
st<-(subset(tgdata, supp == "OJ", select = len))
hist(st$len, col="red" ,freq=TRUE , xlab="Tooth Length", main="Tooth Length for Ascorbic Acid")
st<-(subset(tgdata, supp == "OJ", select = len))
hist(st$len, col="blue" ,freq=TRUE , xlab="Tooth Length", main="Tooth Length for Orange Juice")
st<-(subset(tgdata, supp == "VC", select = len))
hist(st$len, col="red" ,freq=TRUE , xlab="Tooth Length", main="Tooth Length for Ascorbic Acid")
hist(tgdata$len, col="yellow" ,freq=TRUE , xlab="Tooth Length", main="Overall Tooth Length")
abline(v=mean(tgdata$len),col="green",lwd=4)
?hist
shiny::runApp('X:/R/dataprojects/project/part1')
shiny::runApp('X:/R/dataprojects/project/part1')
shiny::runApp('X:/R/dataprojects/project/part1')
setwd("X:/R/dataprojects/project/part1")
library(shiny)
fit <- (mpg ~ wt + mpg, data=mtcars)
new.car <- data.frame(wt=c(2),cyl=c(6))
predict(fit,newdata=new.car)
setwd("X:/R/dataprojects/project/part1")
library(shiny)
fit <- (mpg ~ wt + cyl, data=mtcars)
new.car <- data.frame(wt=c(2),cyl=c(6))
predict(fit,newdata=new.car)
library(shiny)
fit <- lm(mpg ~ wt + cyl, data=mtcars)
new.car <- data.frame(wt=c(2),cyl=c(6))
predict(fit,newdata=new.car)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mtcars
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("X:/R/dataprojects/project/part1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(display.mode="showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(shinyapps)
deployApp()
deployApp()
setwd("~/R/dataprojects/project/part1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(slidify)
library("devtools")
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/R/dataprojects/project/part2")
author("MPG_Predictor")
mode        : selfcontained # {standalone, draft}
shiny::runApp('~/R/dataprojects/project/part1')
plot(mtcars$wt + mtcars$cyl,mtcars$mpg,pch=19,col="blue",xlab="Waiting",ylab="Duration")
qplot(wt,mpg,colour=cyl,data=mtcars)
library(ggplot2)
qplot(wt,mpg,colour=cyl,data=mtcars)
qplot(wt,mpg,colour=cyl,data=mtcars,pch=19)
qplot(wt,mpg,colour=cyl,data=mtcars)
?qplot
qplot(wt,mpg,size=cyl,data=mtcars)
qplot(wt,mpg,colour=cyl,data=mtcars)
qplot(wt,mpg,facets=mpg~cyl,data=mtcars)
qplot(wt,mpg,colour=cyl,data=mtcars)
fit <- lm(mpg ~ wt + cyl, data=mtcars)
qplot(resid(fit), fitted(fit))
qplot(fit,data=mtcars)
qplot(wt,mpg,colour=cyl,data=mtcars)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)
qplot(mpg,wt,colour=factor(cyl),data=mtcars)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)
qplot(wt,mpg,colour=factor(cyl),data=mtcars,cex=0.2)
qplot(wt,mpg,colour=factor(cyl),data=mtcars,cex=0.8)
qplot(wt,mpg,colour=factor(cyl),data=mtcars,cex=0.9)
qplot(wt,mpg,colour=factor(cyl),data=mtcars,cex=3)
qplot(wt,mpg,colour=factor(cyl),data=mtcars,cex=3)
qplot(wt,mpg,colour=factor(cyl),data=mtcars
)
qplot(wt,mpg,colour=factor(cyl),data=mtcars,cex=0.2)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)+scale_point_manual(5)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)+scale_shape_manual(5)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)
required(mtcars);library(ggplot2)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)
require(mtcars);library(ggplot2)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)
data(mtcars);library(ggplot2)
qplot(wt,mpg,colour=factor(cyl),data=mtcars)
